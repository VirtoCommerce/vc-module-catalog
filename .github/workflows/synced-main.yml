name: CI
on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
    - uses: n1hility/cancel-previous-runs@v2
      with: 
        token: ${{ secrets.GITHUB_TOKEN }}
        workflow: synced-main.yml
      
  unit-tests:    
    # The type of runner that the job will run on
    runs-on: windows-latest
    name: Unit Tests
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install VirtoCommerce.GlobalTool
      run: dotnet tool install --global VirtoCommerce.GlobalTool --version 1.0.0

    - name: Install dotnet-sonarscanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: SonarCloud Begin
      if: ${{ env.SONAR_TOKEN != 0 }}
      shell: pwsh
      env:
        PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
      run: |
        $repo = '${{ github.repository }}'.Substring(('${{ github.repository }}'.IndexOf('/')+1))
        $BRANCH='${{ github.ref }}'.Replace('refs/heads', '')
        $CMD="dotnet sonarscanner begin /k:'VirtoCommerce_$($repo)'"
        $CMD="$($CMD) /o:'virto-commerce'"
        $CMD="$($CMD) /d:sonar.cs.opencover.reportsPaths='$PWD/.tmp/coverage.xml'"
        $CMD="$($CMD) /d:sonar.host.url='https://sonarcloud.io'"
        $CMD="$($CMD) /d:sonar.login='${{ secrets.SONAR_TOKEN }}'"
        $CMD = "$($CMD) /d:sonar.branch='$($BRANCH)'"
        if ('${{ github.event_name }}' -eq 'pull_request' ) {
          $CMD="$($CMD) /d:sonar.pullrequest.base='$('${{ github.event.pull_request.base.ref }}')'"
          $CMD="$($CMD) /d:sonar.pullrequest.branch='$($env:PULL_REQUEST_TITLE)'"
          $CMD="$($CMD) /d:sonar.pullrequest.key=${{ github.event.number }}"
        }
        pwsh -command $CMD
    - name: Build
      run: vc-build Compile

    - name: Unit Tests
      run: vc-build Test -skip Restore+Compile

    - name: SonarCloud End
      if: ${{ env.SONAR_TOKEN != 0 }}
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
  build-package:    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build Package
    outputs:
        path: ${{ steps.artifact-path.outputs.path }} 
        name: ${{ steps.artifact-path.outputs.name }} 
        moduleId: ${{ steps.image.outputs.moduleId }}
        tag: ${{ steps.image.outputs.tag }}
        sha: ${{ steps.image.outputs.sha }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install VirtoCommerce.GlobalTool
      run: |
        dotnet tool install --global VirtoCommerce.GlobalTool --version 1.0.0
        mv Directory.Build.Props Directory.Build.props

    - name: Get Image Tag
      uses: VirtoCommerce/vc-github-actions/get-image-tag@v3
      id: image
        
    - name: Build Package
      run: vc-build Compress -skip Test
    
    - name: Find Artifact Path
      id: artifact-path
      shell: pwsh
      run: |
        $file = Get-ChildItem -Path artifacts -Filter "*.zip" | Select-Object -First 1
        Write-Host "::set-output name=path::$($file.FullName)"
        Write-Host "::set-output name=name::$('${{ github.repository }}'.Replace('${{ github.repository_owner }}/', ''))_${{ steps.image.outputs.tag }}"

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        path: ${{ steps.artifact-path.outputs.path }} 
        name: ${{ steps.artifact-path.outputs.name }}

  publish:
    name: Publish image
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [build-package, unit-tests]
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2
        with:
          # Artifact name
          name: ${{needs.build-package.outputs.name}}
          # Destination path
          path: ${{needs.build-package.outputs.path}}

      - name: Set artifact name
        shell: pwsh
        id: artifact
        run: |
          Get-ChildItem ${{needs.build-package.outputs.path}} | ForEach-Object {
            Rename-Item $_ -NewName ${{needs.build-package.outputs.moduleId}}_${{needs.build-package.outputs.tag}}.zip
          }

      - name: Upload a Build Artifact to Azure Blob Storage
        uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: '${{needs.build-package.outputs.path}}'
          container_name: 'packages'
          connection_string: ${{ secrets.BLOB_CONNECTION_STRING }}
          sync: false

      - name: Set Build status Successful
        run: echo "::set-env name=BUILD_STATE::successful"

      - name: Set Build status Failed
        if: failure()
        run: echo "::set-env name=BUILD_STATE::failed"

      - name: Parse Jira Keys from Commit
        id: jira_keys
        if: always()
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Push Build Info to Jira
        if: ${{ env.CLOUD_INSTANCE_BASE_URL != 0 && env.CLIENT_ID != 0 && env.CLIENT_SECRET != 0 && env.BUILD_STATE != 0 && steps.jira_keys.outputs.jira-keys != '' && always() }}
        id: push_build_info_to_jira
        uses: HighwayThree/jira-upload-build-info@master
        env:
          CLOUD_INSTANCE_BASE_URL: ${{secrets.CLOUD_INSTANCE_BASE_URL}}
          CLIENT_ID: ${{secrets.CLIENT_ID}}
          CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
        with:
          cloud-instance-base-url: '${{ secrets.CLOUD_INSTANCE_BASE_URL }}'
          client-id: '${{ secrets.CLIENT_ID }}'
          client-secret: '${{ secrets.CLIENT_SECRET }}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          build-number: ${{ github.run_number }}
          build-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          build-state: "${{ env.BUILD_STATE }}"
          build-url: '${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}'
          update-sequence-number: '${{ github.run_id }}'
          last-updated: '${{github.event.head_commit.timestamp}}'
          issue-keys: "${{ steps.jira_keys.outputs.jira-keys }}"
          commit-id: '${{ github.sha }}'
          repo-url: '${{ github.event.repository.html_url }}'
          build-ref-url: '${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}'
