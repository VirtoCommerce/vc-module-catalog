# v1.1.13
name: Module CI

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
      - '**/argoDeploy.json'
      - samples/**
    branches:
      [master, dev]
  pull_request:
    branches:
      [master, dev]
    paths-ignore:
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
      - '**/argoDeploy.json'
      - samples/**
    
jobs:
  ci:
    if: ${{ github.actor != 'dependabot[bot]' && (github.event.pull_request.head.repo.full_name == github.repository || github.event.pull_request.head.repo.full_name == '') }}  # Check that PR not from forked repo and not from Dependabot
    runs-on: ubuntu-latest
    env:
      CLOUD_INSTANCE_BASE_URL: ${{secrets.CLOUD_INSTANCE_BASE_URL}}
      CLIENT_ID: ${{secrets.CLIENT_ID}}
      CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      NUGET_KEY: ${{ secrets.NUGET_KEY }}
      BLOB_SAS: ${{ secrets.BLOB_TOKEN }}
      VERSION_SUFFIX: ''
      BUILD_STATE: 'failed'
      RELEASE_STATUS: 'false'

    outputs:
      artifactUrl: ${{ steps.artifactUrl.outputs.download_url }}
      jira-keys: ${{ steps.jira_keys.outputs.jira-keys }}
      moduleId: ${{ steps.artifact_ver.outputs.moduleId }}

    steps:

      - name: Set RELEASE_STATUS
        if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}
        run: |
          echo "RELEASE_STATUS=true" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install VirtoCommerce.GlobalTool
        uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master

      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Get Changelog
        id: changelog
        uses: VirtoCommerce/vc-github-actions/changelog-generator@master

      - name: Get Artifact Version
        uses: VirtoCommerce/vc-github-actions/get-image-version@master
        id: artifact_ver

      - name: Set VERSION_SUFFIX variable
        run: |
          if [ '${{ github.event_name }}' = 'workflow_dispatch' ]; then
            echo "VERSION_SUFFIX=${{ steps.artifact_ver.outputs.fullSuffix }}" >> $GITHUB_ENV
          else
            echo "VERSION_SUFFIX=${{ steps.artifact_ver.outputs.suffix }}" >> $GITHUB_ENV
          fi;
      - name: Add version suffix
        if: ${{ github.ref != 'refs/heads/master' }}
        uses: VirtoCommerce/vc-github-actions/add-version-suffix@master
        with:
          versionSuffix: ${{ env.VERSION_SUFFIX }}

      - name: SonarCloud Begin
        uses: VirtoCommerce/vc-github-actions/sonar-scanner-begin@master

      - name: Build
        run: vc-build Compile

      - name: Unit Tests
        run: vc-build Test -skip

      - name: SonarCloud End
        uses: VirtoCommerce/vc-github-actions/sonar-scanner-end@master

      - name: Quality Gate
        uses: VirtoCommerce/vc-github-actions/sonar-quality-gate@master
        with:
          login: ${{secrets.SONAR_TOKEN}}

      - name: Packaging
        run: vc-build Compress -skip Clean+Restore+Compile+Test
      
      - name: Publish Nuget
        if: ${{ (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master') && github.event_name != 'workflow_dispatch' }}
        uses: VirtoCommerce/vc-github-actions/publish-nuget@master

      - name: Publish to Blob
        if: ${{ github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master') }}
        id: blobRelease
        uses: VirtoCommerce/vc-github-actions/publish-blob-release@master
        with:
          blobSAS: ${{ secrets.BLOB_TOKEN }}
          
      - name: Add Jira link
        if: ${{ github.event_name == 'pull_request' }}
        uses: VirtoCommerce/vc-github-actions/publish-jira-link@master
        with:
          branchName: ${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add link to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: VirtoCommerce/vc-github-actions/publish-artifact-link@master
        with:
          artifactUrl: ${{ steps.blobRelease.outputs.packageUrl }}
          downloadComment: 'Artifact URL:'

      - name: Publish Github Release
        if: ${{ github.ref == 'refs/heads/master' }}
        id: githubRelease
        with:
          changelog: ${{ steps.changelog.outputs.changelog }}
        uses: VirtoCommerce/vc-github-actions/publish-github-release@master
        
      - name: Set artifactUrl value
        id: artifactUrl
        run: |
          if [ '${{ github.ref }}' = 'refs/heads/master' ]; then
            echo ::set-output name=download_url::${{ steps.githubRelease.outputs.downloadUrl }}
          else
            echo ::set-output name=download_url::${{ steps.blobRelease.outputs.packageUrl }}
          fi;

      - name: Setup Git Credentials
        if: ${{ (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master') && github.event_name != 'workflow_dispatch' }}
        uses: VirtoCommerce/vc-github-actions/setup-git-credentials-github@master
        with: 
          githubToken: ${{ secrets.REPO_TOKEN }}
        
      - name: Publish Manifest
        if: ${{ (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master') && github.event_name != 'workflow_dispatch' }}
        uses: VirtoCommerce/vc-github-actions/publish-manifest@master
        with:
          packageUrl: ${{ steps.blobRelease.outputs.packageUrl }}

      - name: Update virtocommerce.com
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: VirtoCommerce/vc-github-actions/update-virtocommercecom@master
        with:
          githubToken: ${{ secrets.REPO_TOKEN }}
          login: ${{ secrets.VIRTOCOMMERCE_APP_ID }}
          password: ${{ secrets.VIRTOCOMMERCE_SECRET }}
          moduleId: ${{ steps.artifact_ver.outputs.moduleId }}
          moduleDescription: ${{ steps.artifact_ver.outputs.moduleDescription }}
          projectUrl: ${{ steps.artifact_ver.outputs.projectUrl }}
          iconUrl: ${{ steps.artifact_ver.outputs.iconUrl }}

      - name: Parse Jira Keys from All Commits
        uses: VirtoCommerce/vc-github-actions/get-jira-keys@master
        if: always()
        id: jira_keys
        with:
          release: ${{ env.RELEASE_STATUS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Build Info to Jira
        if: ${{ env.CLOUD_INSTANCE_BASE_URL != 0 && env.CLIENT_ID != 0 && env.CLIENT_SECRET != 0 && steps.jira_keys.outputs.jira-keys != '' && always() }}
        id: push_build_info_to_jira
        uses: HighwayThree/jira-upload-build-info@master
        with:
          cloud-instance-base-url: '${{ secrets.CLOUD_INSTANCE_BASE_URL }}'
          client-id: '${{ secrets.CLIENT_ID }}'
          client-secret: '${{ secrets.CLIENT_SECRET }}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          build-number: ${{ github.run_number }}
          build-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          build-state: '${{ env.BUILD_STATE }}'
          build-url: '${{github.event.repository.url}}/actions/runs/${{github.run_id}}'
          update-sequence-number: '${{ github.run_id }}'
          last-updated: '${{github.event.head_commit.timestamp}}'
          issue-keys: '${{ steps.jira_keys.outputs.jira-keys }}'
          commit-id: '${{ github.sha }}'
          repo-url: '${{ github.event.repository.url }}'
          build-ref-url: '${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}'

      - name: Confirm Jira Build Output
        if: success()
        run: |
          echo "Jira Upload Build Info response: ${{ steps.push_build_info_to_jira.outputs.response }}"

  deploy:
    if: ${{ (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master') && github.event_name == 'push' }}
    needs: ci
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      CLOUD_INSTANCE_BASE_URL: ${{secrets.CLOUD_INSTANCE_BASE_URL}}
      CLIENT_ID: ${{secrets.CLIENT_ID}}
      CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
      DEPLOYMENT_ENV: 'dev'
      SLEEP_TIME: '5m'
      ARGO_SERVER: 'argo.govirto.com'

    steps: 
      - name: Set DEPLOYMENT_ENV variable
        if: ${{ github.ref == 'refs/heads/master' }}
        run: echo "DEPLOYMENT_ENV=prod" >> $GITHUB_ENV

      - name: Read deployment config
        uses: VirtoCommerce/vc-github-actions/get-deploy-param@master
        id: deployConfig
        with:
          envName: ${{ env.DEPLOYMENT_ENV }}
          deployConfigPath: '.deployment/module/argoDeploy.json'

      - name: Start deployment
        uses: bobheadxi/deployments@master
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ steps.deployConfig.outputs.environmentName }}
          no_override: false

      - name: Update deployment-cm
        uses: VirtoCommerce/vc-github-actions/create-deploy-pr@master
        with:
          deployRepo: ${{ steps.deployConfig.outputs.deployRepo }}
          deployBranch: ${{ steps.deployConfig.outputs.deployBranch }}
          artifactKey: ${{ steps.deployConfig.outputs.artifactKey }}
          artifactUrl: ${{ needs.ci.outputs.artifactUrl }}
          taskNumber: 'undefined'
          forceCommit: 'true'
          cmPath: ${{ steps.deployConfig.outputs.cmPath }}

      - name: Sleep for ${{ env.SLEEP_TIME }}
        run: sleep ${{ env.SLEEP_TIME }}
        shell: bash

      - name: Wait for environment is up
        uses: VirtoCommerce/vc-github-actions/vc-argocd-cli@master
        timeout-minutes: 10
        id: argocd-cli
        with:
          server: ${{env.ARGO_SERVER}}
          username: ${{ secrets.ARGOCD_LOGIN }}
          password: ${{ secrets.ARGOCD_PASSWORD }}
          command: app wait ${{ steps.deployConfig.outputs.deployAppName }}

      - name: DEPLOY_STATE::successful
        if: success()
        run: echo "DEPLOY_STATE=successful" >> $GITHUB_ENV

      - name: DEPLOY_STATE::failed
        if: failure()
        run: echo "DEPLOY_STATE=failed"  >> $GITHUB_ENV

      - name: Update GitHub deployment status
        uses: bobheadxi/deployments@master
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Push Deployment Info to Jira
        if: ${{ env.CLOUD_INSTANCE_BASE_URL != 0 && env.CLIENT_ID != 0 && env.CLIENT_SECRET != 0 && needs.ci.outputs.jira-keys != '' && always() }}
        id: push_deployment_info_to_jira
        uses: HighwayThree/jira-upload-deployment-info@master
        env:
          CLOUD_INSTANCE_BASE_URL: ${{secrets.CLOUD_INSTANCE_BASE_URL}}
          CLIENT_ID: ${{secrets.CLIENT_ID}}
          CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
        with:
          cloud-instance-base-url: ${{ secrets.CLOUD_INSTANCE_BASE_URL }}
          client-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          deployment-sequence-number: ${{ github.run_id }}
          update-sequence-number: ${{ github.run_id }}
          issue-keys: ${{ needs.ci.outputs.jira-keys }}
          display-name: ${{ steps.deployConfig.outputs.deployAppName }}
          url: ${{ steps.deployConfig.outputs.environmentUrl }}
          description: 'Deployment to the ${{ steps.deployConfig.outputs.environmentName }} environment'
          last-updated: '${{github.event.head_commit.timestamp}}'
          state: '${{ env.DEPLOY_STATE }}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          pipeline-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          pipeline-url: '${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}'
          environment-id: ${{ steps.deployConfig.outputs.environmentId }}
          environment-display-name: ${{ steps.deployConfig.outputs.environmentName }}
          environment-type: ${{ steps.deployConfig.outputs.environmentType }}

  module-katalon-tests:
    if: ${{ github.event_name == 'pull_request' }}
    needs: 'ci'
    uses: VirtoCommerce/.github/.github/workflows/e2e.yml@main
    with:
      katalonRepo: 'VirtoCommerce/vc-quality-gate-katalon'
      katalonRepoBranch: 'dev'
      testSuite: 'Test Suites/Modules/Platform_collection'
      installModules: 'true'
      installCustomModule: 'true'
      customModuleId:  ${{ needs.ci.outputs.moduleId }}
      customModuleUrl:  ${{ needs.ci.outputs.artifactUrl }}
    secrets:
      envPAT: ${{ secrets.REPO_TOKEN }}
      katalonApiKey: ${{ secrets.KATALON_API_KEY }}
